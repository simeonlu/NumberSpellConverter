{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;\f2\fnil\fcharset0 Menlo-Bold;
}
{\colortbl;\red255\green255\blue255;\red73\green0\blue0;\red0\green20\blue69;\red71\green20\blue0;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww29220\viewh16160\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs36 \cf0 1. Install the app:\
 Unzip the attached file to a folder, and then use Xcode(4.5 or onwards)  to open "Subroutine.xcodeproj" file. You can run it in Simulator or iPhone device. App run in  iOS 6 only. \
\
2. Reason of my solution:\
\
There is two solutions:\
1. Using build-in API: There is a class called NSNumberFormatter in iOS framework that can handle this kind of conversion perfectly . So I think using this class is the easier and quicker way to get the job done.\
\
2. Using custom API: \
\
In English, the gap between 'Thousand', 'million' and 'billion','trillion' is a 3-digits. So a number can be split into several chunks, each chunk has 3 digits, each chunk can be converted to spelling string, and the end just append  the relevant 'units' string (i.e. 'thousand', 'million', etc.) into each chunk after converting.\
 \
There two main functions in my API, first one is to split number into deference chunks, the number in each chunk is less than 1000, second one is to convert the number in chunk, which is less than 1000, into spelling string.\
\
For example; starting with the number: 12345678\
First, we split it into chunks 3 digits across (starting from the left hand side).\
678\
345\
12\
\

\b 678
\b0  converts to '
\f1\fs32 \cf2 \CocoaLigature0 six hundred seventy-eight\cf3 ', \cf0 this is the starting 3-digits, it does not need to append 'hundred'.
\fs22 \cf1 \

\f2\b\fs32 \cf0 345
\f1\b0  converts to '\cf2 three hundred forty-five\cf0 ', this chunk appends '\cf4 thousand\cf0 '.\

\f2\b 12
\f1\b0  convert to 'twelve', it appends '\cf2 million\cf0 '\
and then we got the final combination string '
\f2\b \cf4 twelve million three hundred forty-five thousand six hundred seventy-eight
\f1\b0 \cf0 ' at the end.
\f2\b \

\f0\b0\fs36 \CocoaLigature1 \
3. Test plan\
There is no test harnesses for this project. I just simply test it by some numbers below:\
\
    integer: 1234,789\
    decimal:1234.68,12345.54321,111.01\
    round number: 12345.67, 12345.21\
    large number: 123456789.91,12345678901234.99\
    small number:  0.1234, 0.0,0.1,0.01,1.0\
}